{{#*inline "parameters"}}
{{~#each parameters}}{{@key}}: {{this}}{{#unless @last}}, {{/unless}}{{/each~}}
{{~/inline}}
{{#*inline "parametersUntyped"}}
{{~#each parameters}}{{@key}}{{#unless @last}}, {{/unless}}{{/each~}}
{{~/inline}}
{{#*inline "parametersInObject"}}
{
  {{~> parameters~}}
}
{{~/inline}}
{{#*inline "dependencyOutputs"}}
{
  {{~#each dependencyOutputs}}{{@key}}: {{{this}}}{{#unless @last}}, {{/unless}}{{/each~}}
}
{{~/inline}}
{{#*inline "outputType"}}
{{#if output}}{{{output}}}{{else}}void{{/if}}
{{~/inline}}
{{#*inline "unwrapDependency"}}
{{~#if simple~}}
{{simple}}
{{~else~}}
{do: {{dependency}}{{#if condition}}, when: {{{condition}}}{{/if}}{{#if disableCache}}, disableCache: {{{disableCache}}}{{/if~}} }
{{~/if~}}
{{~/inline}}
import * as Types from "./Types"
import { DependencyGraph } from "./DependencyGraph.generated";
import { AbstractCache } from "./Cache/AbstractCache";
import { CommsDependencyEvaluator } from "./CommsDependencyEvaluator";
import { inject, injectable } from "tsyringe";
import { ClientCertificateInjector } from "../Services/ClientCertificateInjection";
import { DataHolderRegistrationManager } from "../Entities/DataHolderRegistration";
import { ConsentRequestLogManager } from "../Entities/ConsentRequestLog";
import winston from "winston";
import _ from "lodash"

@injectable()
export class DefaultConnector {
  graph: DependencyGraph

  constructor(
    @inject("AdrConnectivityConfig") public configFn:() => Promise<Types.AdrConnectivityConfig>,
    @inject("ClientCertificateInjector") public cert:ClientCertificateInjector,
    @inject("Logger") public logger:winston.Logger,
    public dataholderRegistrationManager: DataHolderRegistrationManager,
    public consentManager:ConsentRequestLogManager,
    @inject("Cache") private cache: AbstractCache
  ) {
    this.graph = new DependencyGraph(configFn,cert,logger,dataholderRegistrationManager,consentManager)
  }


  {{#each dependencies}}
  public {{@key}} = ({{> parameters}}) => ({
    Evaluate: ($?: Types.EvalOpts) => new CommsDependencyEvaluator(this.cache, this.graph.logger).get(this.graph.Dependencies.{{@key}},{ {{> parametersUntyped}} }, _.merge({maxHealingIterations: 0},$)),
    GetWithHealing: ($?: Types.GetOpts<{{> outputType}}>) => new CommsDependencyEvaluator(this.cache, this.graph.logger).get(this.graph.Dependencies.{{@key}},{ {{> parametersUntyped}} }, $)
  })
  {{/each}}

}